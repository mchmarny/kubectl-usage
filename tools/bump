#!/bin/bash
set -eo pipefail

# Dir setup
DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
. "${DIR}/common"
ROOT=$(dirname "${DIR}")

# Check if required tools are installed
has_tools git

# Bump git tag version
bump_version() {
  local bump_type=${1:-patch}
  
  # Check if git working directory is clean
  if ! git diff-index --quiet HEAD --; then
    err "Working directory is not clean. Please commit and push all changes before bumping version so the tag represents a clean state."
  fi
  
  # Check if there are unpushed commits
  if [ "$(git rev-list @{u}..HEAD --count 2>/dev/null || echo 0)" -gt 0 ]; then
    err "There are unpushed commits. Please push all changes before bumping version so the tag represents the remote state."
  fi
  
  # Get current version
  local current_version=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
  
  msg "Current version: $current_version"
  
  # Parse version components (remove 'v' prefix if present)
  local version_without_v=${current_version#v}
  local IFS='.'
  read -ra version_parts <<< "$version_without_v"
  local major=${version_parts[0]:-0}
  local minor=${version_parts[1]:-0}
  local patch=${version_parts[2]:-0}
  
  # Validate current version format
  if [[ ! "$current_version" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
    err "Current version '$current_version' is not in semantic versioning format (x.y.z)"
  fi
  
  # Bump version based on type
  case "$bump_type" in
    major)
      major=$((major + 1))
      minor=0
      patch=0
      ;;
    minor)
      minor=$((minor + 1))
      patch=0
      ;;
    patch)
      patch=$((patch + 1))
      ;;
    *)
      err "Invalid bump type '$bump_type'. Use: major, minor, or patch"
      ;;
  esac
  
  local new_version="v${major}.${minor}.${patch}"
    
  # Check if new version tag already exists locally
  if git tag --list | grep -q "^${new_version}$"; then
    err "Version tag '${new_version}' already exists locally. Use a different bump type or manually set version."
  fi
  
  # Check if new version tag already exists on remote
  if git ls-remote --tags origin | grep -q "refs/tags/${new_version}$"; then
    err "Version tag '${new_version}' already exists on remote. Use a different bump type or manually set version."
  fi
  
  msg "Bumping $bump_type version: $current_version → $new_version"
  git tag -a "$new_version" -m "Release $new_version"
  git push origin HEAD
  git push origin "$new_version"
}

# Show usage if no arguments
if [ $# -eq 0 ]; then
  echo "Usage: $0 <bump_type>"
  echo "Bump types: major, minor, patch"
  echo ""
  echo "Examples:"
  echo "  $0 patch   # v1.2.3 → v1.2.4"
  echo "  $0 minor   # v1.2.3 → v1.3.0" 
  echo "  $0 major   # v1.2.3 → v2.0.0"
  exit 1
fi

# Run version bump
bump_version "$1"
